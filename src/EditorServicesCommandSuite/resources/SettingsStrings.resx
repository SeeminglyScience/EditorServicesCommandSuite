<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SettingInfoGrouping" xml:space="preserve">
    <value>    Group: </value>
  </data>
  <data name="SettingInfoNoGroupMessage" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="SettingInfoDefaultValueDisplay" xml:space="preserve">
    <value>default</value>
  </data>
  <data name="MainModuleDirectoryDescription" xml:space="preserve">
    <value>The relative path from the current workspace to the root directory of the module.</value>
  </data>
  <data name="SourceManifestPathDescription" xml:space="preserve">
    <value>The relative path from the current workspace to the main module manifest file.</value>
  </data>
  <data name="StringLocalizationManifestDescription" xml:space="preserve">
    <value>The relative path from the current workspace to the string localization psd1 file.</value>
  </data>
  <data name="MarkdownDocsPathDescription" xml:space="preserve">
    <value>The relative path from the current workspace to the directory where markdown files are stored.</value>
  </data>
  <data name="FunctionPathsDescription" xml:space="preserve">
    <value>The relative path(s) from the current workspace to the directory(ies) where functions are stored.</value>
  </data>
  <data name="NewLineDescription" xml:space="preserve">
    <value>The string used to created line breaks. Defaults to "[Environment]::NewLine"</value>
  </data>
  <data name="TabStringDescription" xml:space="preserve">
    <value>The string used to created indents. Defaults to four spaces.</value>
  </data>
  <data name="EnableAutomaticNamespaceRemovalDescription" xml:space="preserve">
    <value>Specifies whether namespaces will automatically be removed when writing type literal expressions. Removed namespaces will be automatically added as a using statement.</value>
  </data>
  <data name="CommandSplatRefactor_VariableNameDescription" xml:space="preserve">
    <value>The variable name to use when creating the splat expression variable. The default behavior is to name the string similar to "getCommandNameHereSplat". Setting this to $null will enforce the default behavior.</value>
  </data>
  <data name="CommandSplatRefactor_NoNewLineAfterHashtableDescription" xml:space="preserve">
    <value>Specifies whether a new line should be placed between the hashtable and the original command expression.</value>
  </data>
  <data name="CommandSplatRefactor_AdditionalParametersDescription" xml:space="preserve">
    <value>Specifies if additional parameters that have not been should be added to the splat expression. The following options are available:
    'None' - Only bound parameters. This is the default.
    'Mandatory' - Mandatory parameters that have not yet been bound will be added.
    'All' - All resolved parameters will be added.</value>
  </data>
  <data name="CommandSplatRefactor_ExcludeHintsDescription" xml:space="preserve">
    <value>Specifies whether the value for additional unbound parameters should be a variable of the same name as the parameter, or if it should be decorated with mandatoriness and parameter type.
    $true - Path = $path
    $false - Path = $mandatoryStringPath</value>
  </data>
  <data name="CommandSplatRefactor_VariableCaseTypeDescription" xml:space="preserve">
    <value>Specifies the case style to use for generated variable names.
    'CamelCase' - $getChildItemSplat. This is the default.
    'PascalCase' - $GetChildItemSplat</value>
  </data>
  <data name="ExpandMemberExpression_AllowNonPublicMembersDescription" xml:space="preserve">
    <value>Specifies whether non-public members should be included in the list of resolved members. If a non-public member is selected, an expression utilizing reflection will be generated to access the member.</value>
  </data>
  <data name="UsingStatements_SeparateGroupsWithNewLineDescription" xml:space="preserve">
    <value>Specifies whether groups of using statement types should be separated with a new line character.</value>
  </data>
  <data name="UsingStatements_SystemNamespaceFirstDescription" xml:space="preserve">
    <value>Specifies whether using statements that start with "System" should be ordered first regardless of alphabetical order.</value>
  </data>
  <data name="UsingStatements_UsingKindOrderDescription" xml:space="preserve">
    <value>The order in which groups of using statement types will appear.</value>
  </data>
</root>
